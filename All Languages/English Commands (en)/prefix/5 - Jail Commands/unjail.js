"use strict";
const database = require("../../../../Helpers/Database");
const {
    EMOJIS
} = require("../../../../settings.json");
const {
    EmbedBuilder,
    RESTJSONErrorCodes
} = require("discord.js");
const Util = require("../../../../Helpers/Util");

module.exports = {
    name: "unjail", // Komutun ismi
    id: "unjail", // Komutun ID'si
    cooldown: 3, // Komutun bekleme sÃ¼resi
    aliases: [ // Komutun diÄŸer Ã§aÄŸÄ±rma isimleri
        "unjail",
    ],
    description: "Takes the user out of jail", // Komutun aÃ§Ä±klamasÄ±
    category: "Jail commands", // Komutun kategorisi (yardÄ±m menÃ¼sÃ¼ iÃ§in)
    usage: "<px>unjail <@user or User ID>", // Komutun kullanÄ±m ÅŸekli
    care: false, // Komutun bakÄ±m modunda olup olmadÄ±ÄŸÄ±nÄ± ayarlar
    ownerOnly: false, // Komutun sadece sahiplere Ã¶zel olup olmadÄ±ÄŸÄ±nÄ± ayarlar
    premium: false, // Komutun sadece premium kullanÄ±cÄ±lara Ã¶zel olup olmadÄ±ÄŸÄ±nÄ± ayarlar
    addHelpCommand: true, // Komutun yardÄ±m komuta eklenip eklenmeyeceÄŸini ayarlar

    /**
     * Parametrelerdeki isimlerin ne olduklarÄ±nÄ± tanÄ±mlar
     * @param {import("../../../../typedef").exportsRunCommands} params 
     */
    async execute({
        guildDatabase,
        msg,
        msgMember,
        guildMe,
        guildId,
        guild,
        authorId,
        args,
        prefix,
        errorEmbed,
    }) {

        // EÄŸer yetkili rolÃ¼ varsa yetkili rolÃ¼nÃ¼n olup olmadÄ±ÄŸÄ±nÄ± kontrol et
        const authorizedRoleId = guildDatabase.jail.authRoleId;
        if (authorizedRoleId) {
            // EÄŸer kullanÄ±cÄ±da yetkili rolÃ¼ yoksa hata dÃ¶ndÃ¼r
            if (!msgMember["_roles"].includes(authorizedRoleId) && !msgMember.permissions.has("Administrator")) return errorEmbed(`<@&${authorizedRoleId}> role **or** Administrator`, "memberPermissionError");
        }
        // EÄŸer yetkili rolÃ¼ ayarlanmamÄ±ÅŸsa kullanÄ±cÄ±nÄ±n "YÃ¶netici" yetkisinin olup olmadÄ±ÄŸÄ±nÄ± kontrol et
        else if (!msgMember.permissions.has("Administrator")) return errorEmbed("Administrator", "memberPermissionError");

        // EÄŸer botta "Rolleri YÃ¶net" yetkisi yoksa
        if (!guildMe.permissions.has("ManageRoles")) return errorEmbed("Manage Roles", "botPermissionError");

        // EÄŸer jail rolÃ¼ ayarlÄ± deÄŸilse
        const jailRoleId = guildDatabase.jail.roleId;
        if (!jailRoleId) return errorEmbed(
            `Jail role are __ not setted__ on this server` +
            (msgMember.permissions.has("Administrator") ?
                `\n\nâ€¢ To set it, you can type **${prefix}jail-role @role**` :
                "")
        );

        // EÄŸer jail rolÃ¼nÃ¼n sÄ±rasÄ± bottan Ã¼stteyse
        const highestRole = guildMe.roles.highest;
        if (guild.roles.cache.get(jailRoleId)?.position >= highestRole.position) return errorEmbed(`The set jail role is higher than my role's rank! Please Move the role named <@&${Util.getBotOrHighestRole(guildMe).id}> to the top and try again`);

        const content = args.join(" ");
        const member = msg.mentions.members.first() || await Util.fetchMember(msg, content);

        if (!member) return errorEmbed(
            member === null ?
                "It looks like the person you tagged is not on the server or you typed the ID of something else :(" :
                "Please tag someone or enter their ID"
        );

        const memberId = member.id;

        // EÄŸer kendini Jail'den Ã§Ä±karmaya Ã§alÄ±ÅŸÄ±yorsa
        if (memberId == authorId) return errorEmbed("You can't get yourself out of Jail you stupid thing :)");

        // EÄŸer sunucu sahibini Jail'den Ã§Ä±karmaya Ã§alÄ±ÅŸÄ±yorsa
        if (memberId == guild.ownerId) return errorEmbed("You can't get the server owner out of Jail, you stupid thing :)");

        // EÄŸer kiÅŸi zaten jailde deÄŸil ise
        if (!member["_roles"].includes(jailRoleId)) return errorEmbed(`The person you tagged is not already in jail!`);

        // EÄŸer Jail'den Ã§Ä±karmaya Ã§alÄ±ÅŸtÄ±ÄŸÄ± kiÅŸi botun rolÃ¼nÃ¼n Ã¼stÃ¼ndeyse
        if (member.roles.highest.position >= highestRole.position) return errorEmbed(`The role rank of the person you tagged is higher than the rank of my role! Please Move the role named <@&${Util.getBotOrHighestRole(guildMe).id}> to the top and try again`);

        // KullanÄ±cÄ±yÄ± Jail'e atmadan Ã¶nce kaydedilen rolleri Ã§ek ve sil
        const memberPrevRoles = guildDatabase.jail.prevRoles[memberId] || [];
        delete guildDatabase.jail.prevRoles[memberId];

        // KullanÄ±cÄ±nÄ±n jail'den Ã§Ä±kar ve bÃ¼tÃ¼n rollerini geri ver
        await member.edit({
            roles: memberPrevRoles
        })
            // EÄŸer Jail'den Ã§Ä±karma baÅŸarÄ±lÄ±ysa
            .then(async () => {
                const NOW_TIME = Date.now();

                // EÄŸer kullanÄ±cÄ± tempjaile atÄ±ldÄ±ysa setTimeout fonksiyonunu durdur
                const isSetTimeout = msg.client.jailedMembers.get(`${guildId}.${memberId}`);
                if (typeof isSetTimeout == "function") {
                    isSetTimeout();
                    msg.client.jailedMembers.delete(`${guildId}.${memberId}`);
                }

                // KullanÄ±cÄ±nÄ±n log bilgilerini gÃ¼ncelle
                const userLogs = guildDatabase.userLogs[memberId] ??= [];

                userLogs.unshift({
                    type: "unjail",
                    authorId,
                    timestamp: NOW_TIME
                });

                msg.reply(`${EMOJIS.yes} <@${memberId}> has been released from jail!`);

                // KiÅŸinin Jail'e atÄ±lma bilgilerini Database'ye kaydet
                guildDatabase.jail.last.unshift({
                    timestamp: NOW_TIME,
                    authorId,
                    isJailed: false,
                    memberId
                });

                // Database'yi gÃ¼ncelle
                database.writeFile(guildDatabase, guildId);

                // EÄŸer jail log kanalÄ± varsa o kanala mesaj at
                const jailLogChannelId = guildDatabase.jail.logChannelId;
                if (jailLogChannelId) {
                    const modChannel = guild.channels.cache.get(jailLogChannelId);

                    // EÄŸer kanal varsa iÅŸlemleri devam ettir
                    if (modChannel) {
                        const memberAvatar = member.displayAvatarURL();

                        const embed = new EmbedBuilder()
                            .setAuthor({
                                name: member.user.displayName,
                                iconURL: memberAvatar
                            })
                            .setDescription(
                                `**ğŸ”Š Member <@${memberId}> has been released from jail**\n\n` +
                                `ğŸ§° **AUTHORITY WHO UNJAILED MEMBER**\n` +
                                `**â€¢ Name:** <@${authorId}> - ${Util.recreateString(msg.author.displayName)}\n\n` +
                                `ğŸ‘¤ **UNJAILED MEMBER**\n` +
                                `**â€¢ Name:** <@${memberId}> - ${Util.recreateString(member.user.displayName)}\n` +
                                `**â€¢ Given role:** <@&${jailRoleId}>`
                            )
                            .setThumbnail(memberAvatar)
                            .setColor("#b90ebf")
                            .setFooter({
                                text: `${msg.client.user.username} Log system`,
                                iconURL: msg.client.user.displayAvatarURL()
                            })
                            .setTimestamp()

                        modChannel.send({
                            embeds: [
                                embed
                            ]
                        })
                    }

                }

            }).catch(err => {
                // EÄŸer yetki hatasÄ± verdiyse
                if (err.code == RESTJSONErrorCodes.MissingPermissions) return msg.reply(`I don't have permission to edit <@${memberId}>'s roles. Please Move the role named <@&${Util.getBotOrHighestRole(guildMe).id}> to the top and try again`);

                console.log(err);
                return msg.reply(
                    `Ummm... There was an error, can you try again later??\n` +
                    `\`\`\`js\n` +
                    `${err}\`\`\``
                );
            })

    },
};