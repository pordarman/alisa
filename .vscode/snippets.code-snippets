{
  "userContext": {
    "prefix": "userContext",
    "description": "userContext komutları için gereken verileri yazar",
    "body": [
      "\"use strict\";",
      "const {",
      "    ContextMenuCommandBuilder,",
      "    ApplicationCommandType,",
      "} = require(\"discord.js\");",
      "const Util = require(\"../../../../Helpers/Util\");",
      "",
      "module.exports = {",
      "    name: { // Komutun ismi",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    id: \"\", // Komutun ID'si",
      "    data: { // Komutun nasıl çalışacağını ayarlama",
      "        tr: new ContextMenuCommandBuilder() // Komutun nasıl çalışacağını ayarlama",
      "        .setName(\"\")",
      "        .setType(",
      "            ApplicationCommandType.User",
      "        ),",
      "        en: new ContextMenuCommandBuilder() // Komutun nasıl çalışacağını ayarlama",
      "        .setName(\"\")",
      "        .setType(",
      "            ApplicationCommandType.User",
      "        ),",
      "    },",
      "",
      "    /**",
      "     * Parametrelerdeki isimlerin ne olduklarını tanımlar",
      "     * @param {import(\"../../../../Typedef\").ExportsRunUserContextMenu} params ",
      "     */",
      "    async execute({",
      "        int,",
      "        authorId,",
      "        errorEmbed,",
      "        language",
      "    }) {",
      "       ",
      "    }",
      "}"
    ]
  },
  "buttonCommand": {
    "prefix": "buttonCommand",
    "description": "Buton komutları için gereken verileri yazar",
    "body": [
      "\"use strict\";",
      "const database = require(\"../../../../Helpers/Database\");",
      "const Util = require(\"../../../../Helpers/Util\");",
      "",
      "module.exports = {",
      "    name: { // Butonun ismi",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    id: \"\", // Butonun ID'si",
      "    cooldown: 3, // Butonun bekleme süresi",
      "    description: { // Butonun açıklaması",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    care: false, // Butonun bakım modunda olup olmadığını ayarlar",
      "    ownerOnly: false, // Butonun sadece sahiplere özel olup olmadığını ayarlar",
      "    premium: false, // Butonun sadece premium kullanıcılara özel olup olmadığını ayarlar",
      "",
      "    /**",
      "     * Parametrelerdeki isimlerin ne olduklarını tanımlar",
      "     * @param {import(\"../../../../Typedef\").ExportsRunButtons} params ",
      "     */",
      "    async execute({",
      "        alisa,",
      "        guildDatabase,",
      "        int,",
      "        customId,",
      "        guild,",
      "        guildId,",
      "        authorId,",
      "        errorEmbed,",
      "        language",
      "    }) {",
      "       ",
      "    },",
      "};"
    ]
  },
  "slashCommand": {
    "prefix": "slashCommand",
    "body": [
      "\"use strict\";",
      "const {",
      "    SlashCommandBuilder",
      "} = require(\"discord.js\");",
      "const Util = require(\"../../../../Helpers/Util\");",
      "",
      "module.exports = {",
      "    name: { // Komutun ismi",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    id: \"\", // Komutun ID'si",
      "    data: { // Komutun nasıl çalışacağını ayarlama",
      "        tr: new SlashCommandBuilder()",
      "        .setName(\"\")",
      "        .setDescription(\"\"),",
      "        en: new SlashCommandBuilder()",
      "        .setName(\"\")",
      "        .setDescription(\"\"),",
      "    },",
      "",
      "    /**",
      "     * Parametrelerdeki isimlerin ne olduklarını tanımlar",
      "     * @param {import(\"../../../../Typedef\").ExportsRunSlash} params ",
      "     */",
      "    async execute({",
      "        int,",
      "        authorId,",
      "        errorEmbed,",
      "        language",
      "    }) {",
      "       ",
      "    }",
      "}"
    ],
    "description": "Slash komutları için gereken verileri yazar"
  },
  "prefixCommand": {
    "prefix": "prefixCommand",
    "body": [
      "\"use strict\";",
      "const database = require(\"../../../Helpers/Database\");",
      "const Util = require(\"../../../Helpers/Util\");",
      "",
      "module.exports = {",
      "    name: { // Komutun ismi",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    id: \"\", // Komutun ID'si",
      "    cooldown: 3, // Komutun bekleme süresi",
      "    aliases: { // Komutun diğer çağırma isimleri",
      "        tr: [",
      "            \"\",",
      "        ],",
      "        en: [",
      "            \"\",",
      "        ],",
      "    },",
      "    description: { // Komutun açıklaması",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    category: { // Komutun kategorisi (yardım menüsü için)",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    usage: { // Komutun kullanım şekli",
      "        tr: \"\",",
      "        en: \"\"",
      "    },",
      "    care: false, // Komutun bakım modunda olup olmadığını ayarlar",
      "    ownerOnly: false, // Komutun sadece sahiplere özel olup olmadığını ayarlar",
      "    premium: false, // Komutun sadece premium kullanıcılara özel olup olmadığını ayarlar",
      "    addHelpCommand: true, // Komutun yardım komuta eklenip eklenmeyeceğini ayarlar",
      "",
      "  /**",
      "   * Parametrelerdeki isimlerin ne olduklarını tanımlar",
      "   * @param {import(\"../../../Typedef\").ExportsRunCommands} params ",
      "   */",
      "  async execute({",
      "    alisa,",
      "    msg,",
      "    guildDatabase,",
      "    guildId,",
      "    guildMe,",
      "    guildMePermissions,",
      "    guild,",
      "    msgMember,",
      "    args,",
      "    prefix,",
      "    authorId,",
      "    language,",
      "    errorEmbed,",
      "    isOwner,",
      "    premium",
      "  }) {",
      "     ",
      "  },",
      "};"
    ],
    "description": "Prefix komutları için gereken verileri yazar"
  }
  // Place your Alisa workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
}
